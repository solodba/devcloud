// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/node/pb/rpc.proto

package node

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_QueryNode_FullMethodName       = "/codehorse.mpaas.node.RPC/QueryNode"
	RPC_DescribeNode_FullMethodName    = "/codehorse.mpaas.node.RPC/DescribeNode"
	RPC_UpdateNodeLabel_FullMethodName = "/codehorse.mpaas.node.RPC/UpdateNodeLabel"
	RPC_UpdateNodeTaint_FullMethodName = "/codehorse.mpaas.node.RPC/UpdateNodeTaint"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 获取Node集合
	QueryNode(ctx context.Context, in *QueryNodeRequest, opts ...grpc.CallOption) (*NodeSet, error)
	// 获取Node详情
	DescribeNode(ctx context.Context, in *DescribeNodeRequest, opts ...grpc.CallOption) (*NodeSetItem, error)
	// 更新NodeLabel
	UpdateNodeLabel(ctx context.Context, in *UpdatedLabelRequest, opts ...grpc.CallOption) (*UpdatedLabelResponse, error)
	// 更新NodeTaint
	UpdateNodeTaint(ctx context.Context, in *UpdatedTaintRequest, opts ...grpc.CallOption) (*UpdatedTaintResponse, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) QueryNode(ctx context.Context, in *QueryNodeRequest, opts ...grpc.CallOption) (*NodeSet, error) {
	out := new(NodeSet)
	err := c.cc.Invoke(ctx, RPC_QueryNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeNode(ctx context.Context, in *DescribeNodeRequest, opts ...grpc.CallOption) (*NodeSetItem, error) {
	out := new(NodeSetItem)
	err := c.cc.Invoke(ctx, RPC_DescribeNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateNodeLabel(ctx context.Context, in *UpdatedLabelRequest, opts ...grpc.CallOption) (*UpdatedLabelResponse, error) {
	out := new(UpdatedLabelResponse)
	err := c.cc.Invoke(ctx, RPC_UpdateNodeLabel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateNodeTaint(ctx context.Context, in *UpdatedTaintRequest, opts ...grpc.CallOption) (*UpdatedTaintResponse, error) {
	out := new(UpdatedTaintResponse)
	err := c.cc.Invoke(ctx, RPC_UpdateNodeTaint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 获取Node集合
	QueryNode(context.Context, *QueryNodeRequest) (*NodeSet, error)
	// 获取Node详情
	DescribeNode(context.Context, *DescribeNodeRequest) (*NodeSetItem, error)
	// 更新NodeLabel
	UpdateNodeLabel(context.Context, *UpdatedLabelRequest) (*UpdatedLabelResponse, error)
	// 更新NodeTaint
	UpdateNodeTaint(context.Context, *UpdatedTaintRequest) (*UpdatedTaintResponse, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) QueryNode(context.Context, *QueryNodeRequest) (*NodeSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNode not implemented")
}
func (UnimplementedRPCServer) DescribeNode(context.Context, *DescribeNodeRequest) (*NodeSetItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeNode not implemented")
}
func (UnimplementedRPCServer) UpdateNodeLabel(context.Context, *UpdatedLabelRequest) (*UpdatedLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeLabel not implemented")
}
func (UnimplementedRPCServer) UpdateNodeTaint(context.Context, *UpdatedTaintRequest) (*UpdatedTaintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeTaint not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_QueryNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryNode(ctx, req.(*QueryNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeNode(ctx, req.(*DescribeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateNodeLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateNodeLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateNodeLabel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateNodeLabel(ctx, req.(*UpdatedLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateNodeTaint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedTaintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateNodeTaint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateNodeTaint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateNodeTaint(ctx, req.(*UpdatedTaintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mpaas.node.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryNode",
			Handler:    _RPC_QueryNode_Handler,
		},
		{
			MethodName: "DescribeNode",
			Handler:    _RPC_DescribeNode_Handler,
		},
		{
			MethodName: "UpdateNodeLabel",
			Handler:    _RPC_UpdateNodeLabel_Handler,
		},
		{
			MethodName: "UpdateNodeTaint",
			Handler:    _RPC_UpdateNodeTaint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/node/pb/rpc.proto",
}
