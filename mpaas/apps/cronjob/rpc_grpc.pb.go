// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/cronjob/pb/rpc.proto

package cronjob

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreateCronJob_FullMethodName   = "/codehorse.mpaas.cronjob.RPC/CreateCronJob"
	RPC_DeleteCronJob_FullMethodName   = "/codehorse.mpaas.cronjob.RPC/DeleteCronJob"
	RPC_UpdateCronJob_FullMethodName   = "/codehorse.mpaas.cronjob.RPC/UpdateCronJob"
	RPC_QueryCronJob_FullMethodName    = "/codehorse.mpaas.cronjob.RPC/QueryCronJob"
	RPC_DescribeCronJob_FullMethodName = "/codehorse.mpaas.cronjob.RPC/DescribeCronJob"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 创建CronJob
	CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CronJob, error)
	// 删除CronJob
	DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*CreateCronJobRequest, error)
	// 修改CronJob
	UpdateCronJob(ctx context.Context, in *UpdateCronJobRequest, opts ...grpc.CallOption) (*CronJob, error)
	// 查询CronJob
	QueryCronJob(ctx context.Context, in *QueryCronJobRequest, opts ...grpc.CallOption) (*CronJobSet, error)
	// 查询CronJob详情
	DescribeCronJob(ctx context.Context, in *DescribeCronJobRequest, opts ...grpc.CallOption) (*CreateCronJobRequest, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateCronJob(ctx context.Context, in *CreateCronJobRequest, opts ...grpc.CallOption) (*CronJob, error) {
	out := new(CronJob)
	err := c.cc.Invoke(ctx, RPC_CreateCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteCronJob(ctx context.Context, in *DeleteCronJobRequest, opts ...grpc.CallOption) (*CreateCronJobRequest, error) {
	out := new(CreateCronJobRequest)
	err := c.cc.Invoke(ctx, RPC_DeleteCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateCronJob(ctx context.Context, in *UpdateCronJobRequest, opts ...grpc.CallOption) (*CronJob, error) {
	out := new(CronJob)
	err := c.cc.Invoke(ctx, RPC_UpdateCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryCronJob(ctx context.Context, in *QueryCronJobRequest, opts ...grpc.CallOption) (*CronJobSet, error) {
	out := new(CronJobSet)
	err := c.cc.Invoke(ctx, RPC_QueryCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeCronJob(ctx context.Context, in *DescribeCronJobRequest, opts ...grpc.CallOption) (*CreateCronJobRequest, error) {
	out := new(CreateCronJobRequest)
	err := c.cc.Invoke(ctx, RPC_DescribeCronJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 创建CronJob
	CreateCronJob(context.Context, *CreateCronJobRequest) (*CronJob, error)
	// 删除CronJob
	DeleteCronJob(context.Context, *DeleteCronJobRequest) (*CreateCronJobRequest, error)
	// 修改CronJob
	UpdateCronJob(context.Context, *UpdateCronJobRequest) (*CronJob, error)
	// 查询CronJob
	QueryCronJob(context.Context, *QueryCronJobRequest) (*CronJobSet, error)
	// 查询CronJob详情
	DescribeCronJob(context.Context, *DescribeCronJobRequest) (*CreateCronJobRequest, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreateCronJob(context.Context, *CreateCronJobRequest) (*CronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronJob not implemented")
}
func (UnimplementedRPCServer) DeleteCronJob(context.Context, *DeleteCronJobRequest) (*CreateCronJobRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronJob not implemented")
}
func (UnimplementedRPCServer) UpdateCronJob(context.Context, *UpdateCronJobRequest) (*CronJob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronJob not implemented")
}
func (UnimplementedRPCServer) QueryCronJob(context.Context, *QueryCronJobRequest) (*CronJobSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCronJob not implemented")
}
func (UnimplementedRPCServer) DescribeCronJob(context.Context, *DescribeCronJobRequest) (*CreateCronJobRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCronJob not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateCronJob(ctx, req.(*CreateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteCronJob(ctx, req.(*DeleteCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateCronJob(ctx, req.(*UpdateCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryCronJob(ctx, req.(*QueryCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeCronJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCronJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeCronJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeCronJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeCronJob(ctx, req.(*DescribeCronJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mpaas.cronjob.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronJob",
			Handler:    _RPC_CreateCronJob_Handler,
		},
		{
			MethodName: "DeleteCronJob",
			Handler:    _RPC_DeleteCronJob_Handler,
		},
		{
			MethodName: "UpdateCronJob",
			Handler:    _RPC_UpdateCronJob_Handler,
		},
		{
			MethodName: "QueryCronJob",
			Handler:    _RPC_QueryCronJob_Handler,
		},
		{
			MethodName: "DescribeCronJob",
			Handler:    _RPC_DescribeCronJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/cronjob/pb/rpc.proto",
}
