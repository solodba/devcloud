// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/ingroute/pb/rpc.proto

package ingroute

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreateIngressRoute_FullMethodName          = "/codehorse.mkube.ingroute.RPC/CreateIngressRoute"
	RPC_UpdateIngressRoute_FullMethodName          = "/codehorse.mkube.ingroute.RPC/UpdateIngressRoute"
	RPC_DeleteIngressRoute_FullMethodName          = "/codehorse.mkube.ingroute.RPC/DeleteIngressRoute"
	RPC_QueryIngressRoute_FullMethodName           = "/codehorse.mkube.ingroute.RPC/QueryIngressRoute"
	RPC_DescribeIngressRoute_FullMethodName        = "/codehorse.mkube.ingroute.RPC/DescribeIngressRoute"
	RPC_QueryIngRouteMiddlewareList_FullMethodName = "/codehorse.mkube.ingroute.RPC/QueryIngRouteMiddlewareList"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 创建IngressRoute
	CreateIngressRoute(ctx context.Context, in *CreateIngressRouteRequest, opts ...grpc.CallOption) (*IngressRoute, error)
	// 更新IngressRoute
	UpdateIngressRoute(ctx context.Context, in *UpdateIngressRouteRequest, opts ...grpc.CallOption) (*IngressRoute, error)
	// 删除IngressRoute
	DeleteIngressRoute(ctx context.Context, in *DeleteIngressRouteRequest, opts ...grpc.CallOption) (*CreateIngressRouteRequest, error)
	// 查询IngressRoute
	QueryIngressRoute(ctx context.Context, in *QueryIngressRouteRequest, opts ...grpc.CallOption) (*IngressRouteSet, error)
	// 查询IngressRoute详情
	DescribeIngressRoute(ctx context.Context, in *DescribeIngressRouteRequest, opts ...grpc.CallOption) (*CreateIngressRouteRequest, error)
	// 查询IngressRoute中间件列表
	QueryIngRouteMiddlewareList(ctx context.Context, in *QueryIngRouteMwRequest, opts ...grpc.CallOption) (*MiddlewareList, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateIngressRoute(ctx context.Context, in *CreateIngressRouteRequest, opts ...grpc.CallOption) (*IngressRoute, error) {
	out := new(IngressRoute)
	err := c.cc.Invoke(ctx, RPC_CreateIngressRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateIngressRoute(ctx context.Context, in *UpdateIngressRouteRequest, opts ...grpc.CallOption) (*IngressRoute, error) {
	out := new(IngressRoute)
	err := c.cc.Invoke(ctx, RPC_UpdateIngressRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteIngressRoute(ctx context.Context, in *DeleteIngressRouteRequest, opts ...grpc.CallOption) (*CreateIngressRouteRequest, error) {
	out := new(CreateIngressRouteRequest)
	err := c.cc.Invoke(ctx, RPC_DeleteIngressRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryIngressRoute(ctx context.Context, in *QueryIngressRouteRequest, opts ...grpc.CallOption) (*IngressRouteSet, error) {
	out := new(IngressRouteSet)
	err := c.cc.Invoke(ctx, RPC_QueryIngressRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeIngressRoute(ctx context.Context, in *DescribeIngressRouteRequest, opts ...grpc.CallOption) (*CreateIngressRouteRequest, error) {
	out := new(CreateIngressRouteRequest)
	err := c.cc.Invoke(ctx, RPC_DescribeIngressRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryIngRouteMiddlewareList(ctx context.Context, in *QueryIngRouteMwRequest, opts ...grpc.CallOption) (*MiddlewareList, error) {
	out := new(MiddlewareList)
	err := c.cc.Invoke(ctx, RPC_QueryIngRouteMiddlewareList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 创建IngressRoute
	CreateIngressRoute(context.Context, *CreateIngressRouteRequest) (*IngressRoute, error)
	// 更新IngressRoute
	UpdateIngressRoute(context.Context, *UpdateIngressRouteRequest) (*IngressRoute, error)
	// 删除IngressRoute
	DeleteIngressRoute(context.Context, *DeleteIngressRouteRequest) (*CreateIngressRouteRequest, error)
	// 查询IngressRoute
	QueryIngressRoute(context.Context, *QueryIngressRouteRequest) (*IngressRouteSet, error)
	// 查询IngressRoute详情
	DescribeIngressRoute(context.Context, *DescribeIngressRouteRequest) (*CreateIngressRouteRequest, error)
	// 查询IngressRoute中间件列表
	QueryIngRouteMiddlewareList(context.Context, *QueryIngRouteMwRequest) (*MiddlewareList, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreateIngressRoute(context.Context, *CreateIngressRouteRequest) (*IngressRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngressRoute not implemented")
}
func (UnimplementedRPCServer) UpdateIngressRoute(context.Context, *UpdateIngressRouteRequest) (*IngressRoute, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngressRoute not implemented")
}
func (UnimplementedRPCServer) DeleteIngressRoute(context.Context, *DeleteIngressRouteRequest) (*CreateIngressRouteRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngressRoute not implemented")
}
func (UnimplementedRPCServer) QueryIngressRoute(context.Context, *QueryIngressRouteRequest) (*IngressRouteSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIngressRoute not implemented")
}
func (UnimplementedRPCServer) DescribeIngressRoute(context.Context, *DescribeIngressRouteRequest) (*CreateIngressRouteRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIngressRoute not implemented")
}
func (UnimplementedRPCServer) QueryIngRouteMiddlewareList(context.Context, *QueryIngRouteMwRequest) (*MiddlewareList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIngRouteMiddlewareList not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateIngressRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngressRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateIngressRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateIngressRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateIngressRoute(ctx, req.(*CreateIngressRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateIngressRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngressRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateIngressRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateIngressRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateIngressRoute(ctx, req.(*UpdateIngressRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteIngressRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngressRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteIngressRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteIngressRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteIngressRoute(ctx, req.(*DeleteIngressRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryIngressRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIngressRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryIngressRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryIngressRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryIngressRoute(ctx, req.(*QueryIngressRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeIngressRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIngressRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeIngressRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeIngressRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeIngressRoute(ctx, req.(*DescribeIngressRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryIngRouteMiddlewareList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIngRouteMwRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryIngRouteMiddlewareList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryIngRouteMiddlewareList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryIngRouteMiddlewareList(ctx, req.(*QueryIngRouteMwRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mkube.ingroute.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIngressRoute",
			Handler:    _RPC_CreateIngressRoute_Handler,
		},
		{
			MethodName: "UpdateIngressRoute",
			Handler:    _RPC_UpdateIngressRoute_Handler,
		},
		{
			MethodName: "DeleteIngressRoute",
			Handler:    _RPC_DeleteIngressRoute_Handler,
		},
		{
			MethodName: "QueryIngressRoute",
			Handler:    _RPC_QueryIngressRoute_Handler,
		},
		{
			MethodName: "DescribeIngressRoute",
			Handler:    _RPC_DescribeIngressRoute_Handler,
		},
		{
			MethodName: "QueryIngRouteMiddlewareList",
			Handler:    _RPC_QueryIngRouteMiddlewareList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/ingroute/pb/rpc.proto",
}
