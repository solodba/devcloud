// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/statefulset/pb/rpc.proto

package statefulset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreateStatefulSet_FullMethodName   = "/codehorse.mpaas.statefulset.RPC/CreateStatefulSet"
	RPC_DeleteStatefulSet_FullMethodName   = "/codehorse.mpaas.statefulset.RPC/DeleteStatefulSet"
	RPC_UpdateStatefulSet_FullMethodName   = "/codehorse.mpaas.statefulset.RPC/UpdateStatefulSet"
	RPC_QueryStatefulSet_FullMethodName    = "/codehorse.mpaas.statefulset.RPC/QueryStatefulSet"
	RPC_DescribeStatefulSet_FullMethodName = "/codehorse.mpaas.statefulset.RPC/DescribeStatefulSet"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 创建StatefulSet
	CreateStatefulSet(ctx context.Context, in *CreateStatefulSetRequest, opts ...grpc.CallOption) (*StatefulSet, error)
	// 删除StatefulSet
	DeleteStatefulSet(ctx context.Context, in *DeleteStatefulSetRequest, opts ...grpc.CallOption) (*CreateStatefulSetRequest, error)
	// 更新StatefulSet
	UpdateStatefulSet(ctx context.Context, in *UpdateStatefulSetRequest, opts ...grpc.CallOption) (*StatefulSet, error)
	// 查询StatefulSet
	QueryStatefulSet(ctx context.Context, in *QueryStatefulSetRequest, opts ...grpc.CallOption) (*StatefulSetSet, error)
	// 查询StatefulSet详情
	DescribeStatefulSet(ctx context.Context, in *DescribeStatefulSetRequest, opts ...grpc.CallOption) (*CreateStatefulSetRequest, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateStatefulSet(ctx context.Context, in *CreateStatefulSetRequest, opts ...grpc.CallOption) (*StatefulSet, error) {
	out := new(StatefulSet)
	err := c.cc.Invoke(ctx, RPC_CreateStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteStatefulSet(ctx context.Context, in *DeleteStatefulSetRequest, opts ...grpc.CallOption) (*CreateStatefulSetRequest, error) {
	out := new(CreateStatefulSetRequest)
	err := c.cc.Invoke(ctx, RPC_DeleteStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateStatefulSet(ctx context.Context, in *UpdateStatefulSetRequest, opts ...grpc.CallOption) (*StatefulSet, error) {
	out := new(StatefulSet)
	err := c.cc.Invoke(ctx, RPC_UpdateStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryStatefulSet(ctx context.Context, in *QueryStatefulSetRequest, opts ...grpc.CallOption) (*StatefulSetSet, error) {
	out := new(StatefulSetSet)
	err := c.cc.Invoke(ctx, RPC_QueryStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeStatefulSet(ctx context.Context, in *DescribeStatefulSetRequest, opts ...grpc.CallOption) (*CreateStatefulSetRequest, error) {
	out := new(CreateStatefulSetRequest)
	err := c.cc.Invoke(ctx, RPC_DescribeStatefulSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 创建StatefulSet
	CreateStatefulSet(context.Context, *CreateStatefulSetRequest) (*StatefulSet, error)
	// 删除StatefulSet
	DeleteStatefulSet(context.Context, *DeleteStatefulSetRequest) (*CreateStatefulSetRequest, error)
	// 更新StatefulSet
	UpdateStatefulSet(context.Context, *UpdateStatefulSetRequest) (*StatefulSet, error)
	// 查询StatefulSet
	QueryStatefulSet(context.Context, *QueryStatefulSetRequest) (*StatefulSetSet, error)
	// 查询StatefulSet详情
	DescribeStatefulSet(context.Context, *DescribeStatefulSetRequest) (*CreateStatefulSetRequest, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreateStatefulSet(context.Context, *CreateStatefulSetRequest) (*StatefulSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatefulSet not implemented")
}
func (UnimplementedRPCServer) DeleteStatefulSet(context.Context, *DeleteStatefulSetRequest) (*CreateStatefulSetRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStatefulSet not implemented")
}
func (UnimplementedRPCServer) UpdateStatefulSet(context.Context, *UpdateStatefulSetRequest) (*StatefulSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStatefulSet not implemented")
}
func (UnimplementedRPCServer) QueryStatefulSet(context.Context, *QueryStatefulSetRequest) (*StatefulSetSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStatefulSet not implemented")
}
func (UnimplementedRPCServer) DescribeStatefulSet(context.Context, *DescribeStatefulSetRequest) (*CreateStatefulSetRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeStatefulSet not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateStatefulSet(ctx, req.(*CreateStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteStatefulSet(ctx, req.(*DeleteStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateStatefulSet(ctx, req.(*UpdateStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryStatefulSet(ctx, req.(*QueryStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeStatefulSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeStatefulSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeStatefulSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeStatefulSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeStatefulSet(ctx, req.(*DescribeStatefulSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mpaas.statefulset.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStatefulSet",
			Handler:    _RPC_CreateStatefulSet_Handler,
		},
		{
			MethodName: "DeleteStatefulSet",
			Handler:    _RPC_DeleteStatefulSet_Handler,
		},
		{
			MethodName: "UpdateStatefulSet",
			Handler:    _RPC_UpdateStatefulSet_Handler,
		},
		{
			MethodName: "QueryStatefulSet",
			Handler:    _RPC_QueryStatefulSet_Handler,
		},
		{
			MethodName: "DescribeStatefulSet",
			Handler:    _RPC_DescribeStatefulSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/statefulset/pb/rpc.proto",
}
