// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/configmap/pb/rpc.proto

package configmap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreateConfigMap_FullMethodName   = "/codehorse.mkube.configmap.RPC/CreateConfigMap"
	RPC_DeleteConfigMap_FullMethodName   = "/codehorse.mkube.configmap.RPC/DeleteConfigMap"
	RPC_UpdateConfigMap_FullMethodName   = "/codehorse.mkube.configmap.RPC/UpdateConfigMap"
	RPC_QueryConfigMap_FullMethodName    = "/codehorse.mkube.configmap.RPC/QueryConfigMap"
	RPC_DescribeConfigMap_FullMethodName = "/codehorse.mkube.configmap.RPC/DescribeConfigMap"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 创建ConfigMap
	CreateConfigMap(ctx context.Context, in *CreateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMap, error)
	// 删除ConfigMap
	DeleteConfigMap(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapSetItem, error)
	// 更新ConfigMap
	UpdateConfigMap(ctx context.Context, in *UpdateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMap, error)
	// 查询ConfigMap
	QueryConfigMap(ctx context.Context, in *QueryConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapSet, error)
	// 查询ConfigMap详情
	DescribeConfigMap(ctx context.Context, in *DescribeConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapSetItem, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateConfigMap(ctx context.Context, in *CreateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMap, error) {
	out := new(ConfigMap)
	err := c.cc.Invoke(ctx, RPC_CreateConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteConfigMap(ctx context.Context, in *DeleteConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapSetItem, error) {
	out := new(ConfigMapSetItem)
	err := c.cc.Invoke(ctx, RPC_DeleteConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateConfigMap(ctx context.Context, in *UpdateConfigMapRequest, opts ...grpc.CallOption) (*ConfigMap, error) {
	out := new(ConfigMap)
	err := c.cc.Invoke(ctx, RPC_UpdateConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryConfigMap(ctx context.Context, in *QueryConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapSet, error) {
	out := new(ConfigMapSet)
	err := c.cc.Invoke(ctx, RPC_QueryConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeConfigMap(ctx context.Context, in *DescribeConfigMapRequest, opts ...grpc.CallOption) (*ConfigMapSetItem, error) {
	out := new(ConfigMapSetItem)
	err := c.cc.Invoke(ctx, RPC_DescribeConfigMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 创建ConfigMap
	CreateConfigMap(context.Context, *CreateConfigMapRequest) (*ConfigMap, error)
	// 删除ConfigMap
	DeleteConfigMap(context.Context, *DeleteConfigMapRequest) (*ConfigMapSetItem, error)
	// 更新ConfigMap
	UpdateConfigMap(context.Context, *UpdateConfigMapRequest) (*ConfigMap, error)
	// 查询ConfigMap
	QueryConfigMap(context.Context, *QueryConfigMapRequest) (*ConfigMapSet, error)
	// 查询ConfigMap详情
	DescribeConfigMap(context.Context, *DescribeConfigMapRequest) (*ConfigMapSetItem, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreateConfigMap(context.Context, *CreateConfigMapRequest) (*ConfigMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigMap not implemented")
}
func (UnimplementedRPCServer) DeleteConfigMap(context.Context, *DeleteConfigMapRequest) (*ConfigMapSetItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigMap not implemented")
}
func (UnimplementedRPCServer) UpdateConfigMap(context.Context, *UpdateConfigMapRequest) (*ConfigMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigMap not implemented")
}
func (UnimplementedRPCServer) QueryConfigMap(context.Context, *QueryConfigMapRequest) (*ConfigMapSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConfigMap not implemented")
}
func (UnimplementedRPCServer) DescribeConfigMap(context.Context, *DescribeConfigMapRequest) (*ConfigMapSetItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeConfigMap not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateConfigMap(ctx, req.(*CreateConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteConfigMap(ctx, req.(*DeleteConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateConfigMap(ctx, req.(*UpdateConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryConfigMap(ctx, req.(*QueryConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeConfigMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeConfigMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeConfigMap(ctx, req.(*DescribeConfigMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mkube.configmap.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfigMap",
			Handler:    _RPC_CreateConfigMap_Handler,
		},
		{
			MethodName: "DeleteConfigMap",
			Handler:    _RPC_DeleteConfigMap_Handler,
		},
		{
			MethodName: "UpdateConfigMap",
			Handler:    _RPC_UpdateConfigMap_Handler,
		},
		{
			MethodName: "QueryConfigMap",
			Handler:    _RPC_QueryConfigMap_Handler,
		},
		{
			MethodName: "DescribeConfigMap",
			Handler:    _RPC_DescribeConfigMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/configmap/pb/rpc.proto",
}
