// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/daemonset/pb/rpc.proto

package daemonset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreateDaemonSet_FullMethodName   = "/codehorse.mpaas.daemonset.RPC/CreateDaemonSet"
	RPC_DeleteDaemonSet_FullMethodName   = "/codehorse.mpaas.daemonset.RPC/DeleteDaemonSet"
	RPC_UpdateDaemonSet_FullMethodName   = "/codehorse.mpaas.daemonset.RPC/UpdateDaemonSet"
	RPC_QueryDaemonSet_FullMethodName    = "/codehorse.mpaas.daemonset.RPC/QueryDaemonSet"
	RPC_DescribeDaemonSet_FullMethodName = "/codehorse.mpaas.daemonset.RPC/DescribeDaemonSet"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 创建DaemonSet
	CreateDaemonSet(ctx context.Context, in *CreateDaemonSetRequest, opts ...grpc.CallOption) (*DaemonSet, error)
	// 删除DaemonSet
	DeleteDaemonSet(ctx context.Context, in *DeleteDaemonSetRequest, opts ...grpc.CallOption) (*CreateDaemonSetRequest, error)
	// 更新DaemonSet
	UpdateDaemonSet(ctx context.Context, in *UpdateDaemonSetRequest, opts ...grpc.CallOption) (*DaemonSet, error)
	// 查询DaemonSet
	QueryDaemonSet(ctx context.Context, in *QueryDaemonSetRequest, opts ...grpc.CallOption) (*DaemonSetList, error)
	// 查询DaemonSet详情
	DescribeDaemonSet(ctx context.Context, in *DescribeDaemonSetRequest, opts ...grpc.CallOption) (*CreateDaemonSetRequest, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreateDaemonSet(ctx context.Context, in *CreateDaemonSetRequest, opts ...grpc.CallOption) (*DaemonSet, error) {
	out := new(DaemonSet)
	err := c.cc.Invoke(ctx, RPC_CreateDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeleteDaemonSet(ctx context.Context, in *DeleteDaemonSetRequest, opts ...grpc.CallOption) (*CreateDaemonSetRequest, error) {
	out := new(CreateDaemonSetRequest)
	err := c.cc.Invoke(ctx, RPC_DeleteDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdateDaemonSet(ctx context.Context, in *UpdateDaemonSetRequest, opts ...grpc.CallOption) (*DaemonSet, error) {
	out := new(DaemonSet)
	err := c.cc.Invoke(ctx, RPC_UpdateDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryDaemonSet(ctx context.Context, in *QueryDaemonSetRequest, opts ...grpc.CallOption) (*DaemonSetList, error) {
	out := new(DaemonSetList)
	err := c.cc.Invoke(ctx, RPC_QueryDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribeDaemonSet(ctx context.Context, in *DescribeDaemonSetRequest, opts ...grpc.CallOption) (*CreateDaemonSetRequest, error) {
	out := new(CreateDaemonSetRequest)
	err := c.cc.Invoke(ctx, RPC_DescribeDaemonSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 创建DaemonSet
	CreateDaemonSet(context.Context, *CreateDaemonSetRequest) (*DaemonSet, error)
	// 删除DaemonSet
	DeleteDaemonSet(context.Context, *DeleteDaemonSetRequest) (*CreateDaemonSetRequest, error)
	// 更新DaemonSet
	UpdateDaemonSet(context.Context, *UpdateDaemonSetRequest) (*DaemonSet, error)
	// 查询DaemonSet
	QueryDaemonSet(context.Context, *QueryDaemonSetRequest) (*DaemonSetList, error)
	// 查询DaemonSet详情
	DescribeDaemonSet(context.Context, *DescribeDaemonSetRequest) (*CreateDaemonSetRequest, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreateDaemonSet(context.Context, *CreateDaemonSetRequest) (*DaemonSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDaemonSet not implemented")
}
func (UnimplementedRPCServer) DeleteDaemonSet(context.Context, *DeleteDaemonSetRequest) (*CreateDaemonSetRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDaemonSet not implemented")
}
func (UnimplementedRPCServer) UpdateDaemonSet(context.Context, *UpdateDaemonSetRequest) (*DaemonSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDaemonSet not implemented")
}
func (UnimplementedRPCServer) QueryDaemonSet(context.Context, *QueryDaemonSetRequest) (*DaemonSetList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDaemonSet not implemented")
}
func (UnimplementedRPCServer) DescribeDaemonSet(context.Context, *DescribeDaemonSetRequest) (*CreateDaemonSetRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDaemonSet not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreateDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreateDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreateDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreateDaemonSet(ctx, req.(*CreateDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeleteDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeleteDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeleteDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeleteDaemonSet(ctx, req.(*DeleteDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdateDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdateDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdateDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdateDaemonSet(ctx, req.(*UpdateDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryDaemonSet(ctx, req.(*QueryDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribeDaemonSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDaemonSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribeDaemonSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribeDaemonSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribeDaemonSet(ctx, req.(*DescribeDaemonSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mpaas.daemonset.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDaemonSet",
			Handler:    _RPC_CreateDaemonSet_Handler,
		},
		{
			MethodName: "DeleteDaemonSet",
			Handler:    _RPC_DeleteDaemonSet_Handler,
		},
		{
			MethodName: "UpdateDaemonSet",
			Handler:    _RPC_UpdateDaemonSet_Handler,
		},
		{
			MethodName: "QueryDaemonSet",
			Handler:    _RPC_QueryDaemonSet_Handler,
		},
		{
			MethodName: "DescribeDaemonSet",
			Handler:    _RPC_DescribeDaemonSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/daemonset/pb/rpc.proto",
}
