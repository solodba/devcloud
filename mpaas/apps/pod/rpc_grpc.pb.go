// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: apps/pod/pb/rpc.proto

package pod

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_CreatePod_FullMethodName   = "/codehorse.mpaas.pod.RPC/CreatePod"
	RPC_DeletePod_FullMethodName   = "/codehorse.mpaas.pod.RPC/DeletePod"
	RPC_UpdatePod_FullMethodName   = "/codehorse.mpaas.pod.RPC/UpdatePod"
	RPC_QueryPod_FullMethodName    = "/codehorse.mpaas.pod.RPC/QueryPod"
	RPC_DescribePod_FullMethodName = "/codehorse.mpaas.pod.RPC/DescribePod"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	// 创建Pod
	CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*Pod, error)
	// 删除Pod
	DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*Pod, error)
	// 修改Pod
	UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*Pod, error)
	// 查询Pod
	QueryPod(ctx context.Context, in *QueryPodRequest, opts ...grpc.CallOption) (*PodSet, error)
	// 查询Pod详情
	DescribePod(ctx context.Context, in *DescribePodRequest, opts ...grpc.CallOption) (*Pod, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) CreatePod(ctx context.Context, in *CreatePodRequest, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := c.cc.Invoke(ctx, RPC_CreatePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DeletePod(ctx context.Context, in *DeletePodRequest, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := c.cc.Invoke(ctx, RPC_DeletePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) UpdatePod(ctx context.Context, in *UpdatePodRequest, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := c.cc.Invoke(ctx, RPC_UpdatePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) QueryPod(ctx context.Context, in *QueryPodRequest, opts ...grpc.CallOption) (*PodSet, error) {
	out := new(PodSet)
	err := c.cc.Invoke(ctx, RPC_QueryPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCClient) DescribePod(ctx context.Context, in *DescribePodRequest, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := c.cc.Invoke(ctx, RPC_DescribePod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	// 创建Pod
	CreatePod(context.Context, *CreatePodRequest) (*Pod, error)
	// 删除Pod
	DeletePod(context.Context, *DeletePodRequest) (*Pod, error)
	// 修改Pod
	UpdatePod(context.Context, *UpdatePodRequest) (*Pod, error)
	// 查询Pod
	QueryPod(context.Context, *QueryPodRequest) (*PodSet, error)
	// 查询Pod详情
	DescribePod(context.Context, *DescribePodRequest) (*Pod, error)
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) CreatePod(context.Context, *CreatePodRequest) (*Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePod not implemented")
}
func (UnimplementedRPCServer) DeletePod(context.Context, *DeletePodRequest) (*Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePod not implemented")
}
func (UnimplementedRPCServer) UpdatePod(context.Context, *UpdatePodRequest) (*Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePod not implemented")
}
func (UnimplementedRPCServer) QueryPod(context.Context, *QueryPodRequest) (*PodSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPod not implemented")
}
func (UnimplementedRPCServer) DescribePod(context.Context, *DescribePodRequest) (*Pod, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribePod not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_CreatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).CreatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_CreatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).CreatePod(ctx, req.(*CreatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DeletePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DeletePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DeletePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DeletePod(ctx, req.(*DeletePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_UpdatePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).UpdatePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_UpdatePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).UpdatePod(ctx, req.(*UpdatePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_QueryPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).QueryPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_QueryPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).QueryPod(ctx, req.(*QueryPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPC_DescribePod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribePodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCServer).DescribePod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPC_DescribePod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCServer).DescribePod(ctx, req.(*DescribePodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codehorse.mpaas.pod.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePod",
			Handler:    _RPC_CreatePod_Handler,
		},
		{
			MethodName: "DeletePod",
			Handler:    _RPC_DeletePod_Handler,
		},
		{
			MethodName: "UpdatePod",
			Handler:    _RPC_UpdatePod_Handler,
		},
		{
			MethodName: "QueryPod",
			Handler:    _RPC_QueryPod_Handler,
		},
		{
			MethodName: "DescribePod",
			Handler:    _RPC_DescribePod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/pod/pb/rpc.proto",
}
